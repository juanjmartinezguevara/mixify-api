{"ast":null,"code":"var _jsxFileName = \"/Users/JuanMtz/Desktop/Labs/w06/project-api/src/components/Playlist.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport token from \"./Token\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlist(props) {\n  _s();\n\n  let [categories, setCategories] = useState([\"\"]);\n  let [category, setCategory] = useState(\"\");\n  let [playlists, setPlaylists] = useState([]);\n  let [tracks, setTracks] = useState([]);\n  let [allTracks, setAllTracks] = useState([]);\n  let [randomPlaylist, setRandomPlaylist] = useState([]);\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  async function getCategories() {\n    fetch(`https://api.spotify.com/v1/browse/categories?limit=50`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(\"Fetching categories data...\", data);\n      setCategories(data.categories.items);\n    });\n  }\n\n  async function getPlaylists(category_id) {\n    setCategory(category_id);\n    fetch(`https://api.spotify.com/v1/browse/categories/${category_id}/playlists`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(`Fetching the ${category_id.toUpperCase()} category playlists...`, data.playlists);\n      setPlaylists(data.playlists.items);\n      data.playlists.items.map(async eachPlaylist => {\n        fetch(`https://api.spotify.com/v1/playlists/${eachPlaylist.id}/tracks`, {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${await token()}`,\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(res => res.json()).then(data => {\n          console.log(`Fetching the ${eachPlaylist.name.toUpperCase()} playlist tracks...`, data.items);\n          setAllTracks(...tracks, data.items);\n          setRandomPlaylist(data.items);\n        }).catch(error => {\n          console.log(error);\n        });\n      });\n    });\n  }\n\n  async function getTracks(playlist_id) {\n    fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(`Fetching playlist tracks...`, data.items);\n      setTracks(data.items);\n    });\n  }\n\n  const showCategories = () => {\n    return categories.map(eachCat => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getPlaylists(eachCat.id),\n        children: eachCat.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this);\n    });\n  }; //   const showPlaylist = () => {\n  //     return playlists.map((eachPlaylist) => {\n  //       return (\n  //         <li onClick={() => getTracks(eachPlaylist.id)}>{eachPlaylist.name}</li>\n  //       );\n  //     });\n  //   };\n  //   const showTracks = () => {\n  //     return tracks.map((eachTrack) => {\n  //       if (eachTrack.track.preview_url) {\n  //         return (\n  //           <li>\n  //             {eachTrack.track.name}\n  //             <audio controls>\n  //               <source src={eachTrack.track.preview_url} type=\"audio/mpeg\" />\n  //             </audio>\n  //           </li>\n  //         );\n  //       }\n  //     });\n  //   };\n\n\n  let randomizedPlaylist = [];\n  let randomInt;\n  let randomInt2;\n\n  const showPlaylist = () => {\n    // return playlists.map((eachPlaylist) => {\n    //   getTracks(eachPlaylist.id);\n    //   randomizedPlaylist.concat(eachPlaylist)\n    //   return tracks.map((eachTrack) => {\n    // randomizedPlaylist.push(eachTrack);\n    randomInt = getRandomInt(randomizedPlaylist.length);\n\n    for (let i = 0; i < 35; i++) {\n      var _randomizedPlaylist$r;\n\n      if ((_randomizedPlaylist$r = randomizedPlaylist[randomInt]) === null || _randomizedPlaylist$r === void 0 ? void 0 : _randomizedPlaylist$r.track.preview_url) {\n        var _randomizedPlaylist$r2, _randomizedPlaylist$r3, _randomizedPlaylist$r4, _randomizedPlaylist$r5;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: (_randomizedPlaylist$r2 = randomizedPlaylist[randomInt]) === null || _randomizedPlaylist$r2 === void 0 ? void 0 : _randomizedPlaylist$r2.track.album.images[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [(_randomizedPlaylist$r3 = randomizedPlaylist[randomInt]) === null || _randomizedPlaylist$r3 === void 0 ? void 0 : _randomizedPlaylist$r3.track.name, \" by \", (_randomizedPlaylist$r4 = randomizedPlaylist[randomInt]) === null || _randomizedPlaylist$r4 === void 0 ? void 0 : _randomizedPlaylist$r4.track.artist]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            children: /*#__PURE__*/_jsxDEV(\"source\", {\n              src: (_randomizedPlaylist$r5 = randomizedPlaylist[randomInt]) === null || _randomizedPlaylist$r5 === void 0 ? void 0 : _randomizedPlaylist$r5.track.preview_url,\n              type: \"audio/mpeg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this);\n      }\n    }\n\n    ; // });\n  };\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Choose a genre for your new playlist!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: showCategories()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"PLAYLIST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: showPlaylist()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-row\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Return: Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Playlist, \"Y6Zefh1KOh8Ndblw5GY0bcN/hA8=\");\n\n_c = Playlist;\nexport default Playlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"sources":["/Users/JuanMtz/Desktop/Labs/w06/project-api/src/components/Playlist.js"],"names":["React","useState","useEffect","Link","useHistory","token","Playlist","props","categories","setCategories","category","setCategory","playlists","setPlaylists","tracks","setTracks","allTracks","setAllTracks","randomPlaylist","setRandomPlaylist","getCategories","fetch","headers","Accept","Authorization","then","res","json","data","console","log","items","getPlaylists","category_id","toUpperCase","map","eachPlaylist","id","name","catch","error","getTracks","playlist_id","showCategories","eachCat","randomizedPlaylist","randomInt","randomInt2","showPlaylist","getRandomInt","length","i","track","preview_url","album","images","artist","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport token from \"./Token\";\n\nfunction Playlist(props) {\n  let [categories, setCategories] = useState([\"\"]);\n  let [category, setCategory] = useState(\"\");\n  let [playlists, setPlaylists] = useState([]);\n  let [tracks, setTracks] = useState([]);\n  let [allTracks, setAllTracks] = useState([]);\n  let [randomPlaylist, setRandomPlaylist] = useState([])\n\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  async function getCategories() {\n    fetch(`https://api.spotify.com/v1/browse/categories?limit=50`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Fetching categories data...\", data);\n        setCategories(data.categories.items);\n      });\n  }\n\n  async function getPlaylists(category_id) {\n    setCategory(category_id);\n    fetch(\n      `https://api.spotify.com/v1/browse/categories/${category_id}/playlists`,\n      {\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${await token()}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\n          `Fetching the ${category_id.toUpperCase()} category playlists...`,\n          data.playlists\n        );\n        setPlaylists(data.playlists.items);\n        data.playlists.items.map(async (eachPlaylist) => {\n          fetch(\n            `https://api.spotify.com/v1/playlists/${eachPlaylist.id}/tracks`,\n            {\n              headers: {\n                Accept: \"application/json\",\n                Authorization: `Bearer ${await token()}`,\n                \"Content-Type\": \"application/json\",\n              },\n            }\n          )\n            .then((res) => res.json())\n            .then((data) => {\n              console.log(\n                `Fetching the ${eachPlaylist.name.toUpperCase()} playlist tracks...`,\n                data.items\n              );\n              setAllTracks(...tracks, data.items);\n              setRandomPlaylist(data.items)\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        });\n      });\n  }\n\n  async function getTracks(playlist_id) {\n    fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(`Fetching playlist tracks...`, data.items);\n        setTracks(data.items);\n      });\n  }\n\n  const showCategories = () => {\n    return categories.map((eachCat) => {\n      return (\n        <button onClick={() => getPlaylists(eachCat.id)}>{eachCat.name}</button>\n      );\n    });\n  };\n\n  //   const showPlaylist = () => {\n  //     return playlists.map((eachPlaylist) => {\n  //       return (\n  //         <li onClick={() => getTracks(eachPlaylist.id)}>{eachPlaylist.name}</li>\n  //       );\n  //     });\n  //   };\n\n  //   const showTracks = () => {\n  //     return tracks.map((eachTrack) => {\n  //       if (eachTrack.track.preview_url) {\n  //         return (\n  //           <li>\n  //             {eachTrack.track.name}\n  //             <audio controls>\n  //               <source src={eachTrack.track.preview_url} type=\"audio/mpeg\" />\n  //             </audio>\n  //           </li>\n  //         );\n  //       }\n  //     });\n  //   };\n\n  let randomizedPlaylist = [];\n  let randomInt\n  let randomInt2\n\n  const showPlaylist = () => {\n    // return playlists.map((eachPlaylist) => {\n    //   getTracks(eachPlaylist.id);\n    //   randomizedPlaylist.concat(eachPlaylist)\n    //   return tracks.map((eachTrack) => {\n        // randomizedPlaylist.push(eachTrack);\n        randomInt = getRandomInt(randomizedPlaylist.length);\n        for (let i = 0; i < 35; i++) {\n          if (randomizedPlaylist[randomInt]?.track.preview_url) {\n            return (\n              <div>\n                <img src={randomizedPlaylist[randomInt]?.track.album.images[0]} />\n                <h3>\n                  {randomizedPlaylist[randomInt]?.track.name} by {randomizedPlaylist[randomInt]?.track.artist}\n                </h3>\n                <audio controls>\n                  <source src={randomizedPlaylist[randomInt]?.track.preview_url} type=\"audio/mpeg\" />\n                </audio>\n              </div>\n            );\n          }\n        };\n    // });\n  };\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  return (\n    <div>\n      <h1>Choose a genre for your new playlist!</h1>\n      {/* <button onClick={getPlaylists(\"chill\")}>Chill</button>\n      <button onClick={getPlaylists(\"romance\")}>Romance</button> */}\n      {/* {makePlaylist()} */}\n      <ul>{showCategories()}</ul>\n      <h2>PLAYLIST</h2>\n      <ul>{showPlaylist()}</ul>\n      {/* <h2>TRACKS</h2>\n      <ul>{showTracks()}</ul> */}\n      <div className=\"buttons-row\">\n        <Link to=\"/\">\n          <button>Return: Home</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Playlist;\n"]},"metadata":{},"sourceType":"module"}