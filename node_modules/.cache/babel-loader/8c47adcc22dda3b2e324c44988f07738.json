{"ast":null,"code":"var _jsxFileName = \"/Users/JuanMtz/Desktop/Labs/w06/project-api/src/components/Playlist.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport token from \"./Token\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlist(props) {\n  _s();\n\n  let [categories, setCategories] = useState([]);\n  let [category, setCategory] = useState(\"\");\n  let [playlists, setPlaylists] = useState([]);\n  let [tracks, setTracks] = useState([]);\n  let [allTracks, setAllTracks] = useState([]);\n  let [randomPlaylist, setRandomPlaylist] = useState([]);\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  async function getCategories() {\n    fetch(`https://api.spotify.com/v1/browse/categories?limit=50`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(\"Fetching categories data...\", data);\n      setCategories(data.categories.items);\n    });\n  }\n\n  async function getPlaylists(category_id) {\n    setCategory(category_id);\n    fetch(`https://api.spotify.com/v1/browse/categories/${category_id}/playlists`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(`Fetching the ${category_id.toUpperCase()} category playlists...`, data.playlists);\n      setPlaylists(data.playlists.items);\n      data.playlists.items.map(async eachPlaylist => {\n        fetch(`https://api.spotify.com/v1/playlists/${eachPlaylist.id}/tracks`, {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${await token()}`,\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(res => res.json()).then(data => {\n          console.log(`Fetching the ${eachPlaylist.name.toUpperCase()} playlist tracks...`, data.items);\n          setAllTracks(...tracks, data.items);\n          setRandomPlaylist(data.items);\n        }).catch(error => {\n          console.log(error);\n        });\n      });\n    });\n  }\n\n  const showCategories = () => {\n    return categories.map(eachCat => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getPlaylists(eachCat.id),\n        children: eachCat.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  let randomInt;\n\n  const showPlaylist = () => {\n    return randomPlaylist.map(eachPlaylist => {\n      randomInt = getRandomInt(randomPlaylist.length);\n\n      for (let i = 0; i < 35; i++) {\n        var _randomPlaylist$rando;\n\n        if ((_randomPlaylist$rando = randomPlaylist[randomInt]) === null || _randomPlaylist$rando === void 0 ? void 0 : _randomPlaylist$rando.track.preview_url) {\n          var _randomPlaylist$rando2, _randomPlaylist$rando3, _randomPlaylist$rando4;\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"music-tile\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: (_randomPlaylist$rando2 = randomPlaylist[randomInt]) === null || _randomPlaylist$rando2 === void 0 ? void 0 : _randomPlaylist$rando2.track.album.images[0].url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: (_randomPlaylist$rando3 = randomPlaylist[randomInt]) === null || _randomPlaylist$rando3 === void 0 ? void 0 : _randomPlaylist$rando3.track.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n              controls: true,\n              children: /*#__PURE__*/_jsxDEV(\"source\", {\n                src: (_randomPlaylist$rando4 = randomPlaylist[randomInt]) === null || _randomPlaylist$rando4 === void 0 ? void 0 : _randomPlaylist$rando4.track.preview_url,\n                type: \"audio/mpeg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this);\n        }\n      }\n    });\n  };\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"margin\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Choose a genre for your new playlist!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-panel\",\n        children: showCategories()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-panel\",\n        children: showPlaylist()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-row margin\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Return: Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Playlist, \"gyfsYGaKH0agWfvbXssisL/rW7s=\");\n\n_c = Playlist;\nexport default Playlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"sources":["/Users/JuanMtz/Desktop/Labs/w06/project-api/src/components/Playlist.js"],"names":["React","useState","useEffect","Link","useHistory","token","Playlist","props","categories","setCategories","category","setCategory","playlists","setPlaylists","tracks","setTracks","allTracks","setAllTracks","randomPlaylist","setRandomPlaylist","getCategories","fetch","headers","Accept","Authorization","then","res","json","data","console","log","items","getPlaylists","category_id","toUpperCase","map","eachPlaylist","id","name","catch","error","showCategories","eachCat","randomInt","showPlaylist","getRandomInt","length","i","track","preview_url","album","images","url","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport token from \"./Token\";\n\nfunction Playlist(props) {\n  let [categories, setCategories] = useState([]);\n  let [category, setCategory] = useState(\"\");\n  let [playlists, setPlaylists] = useState([]);\n  let [tracks, setTracks] = useState([]);\n  let [allTracks, setAllTracks] = useState([]);\n  let [randomPlaylist, setRandomPlaylist] = useState([]);\n\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  async function getCategories() {\n    fetch(`https://api.spotify.com/v1/browse/categories?limit=50`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Fetching categories data...\", data);\n        setCategories(data.categories.items);\n      });\n  }\n\n  async function getPlaylists(category_id) {\n    setCategory(category_id);\n    fetch(\n      `https://api.spotify.com/v1/browse/categories/${category_id}/playlists`,\n      {\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${await token()}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\n          `Fetching the ${category_id.toUpperCase()} category playlists...`,\n          data.playlists\n        );\n        setPlaylists(data.playlists.items);\n        data.playlists.items.map(async (eachPlaylist) => {\n          fetch(\n            `https://api.spotify.com/v1/playlists/${eachPlaylist.id}/tracks`,\n            {\n              headers: {\n                Accept: \"application/json\",\n                Authorization: `Bearer ${await token()}`,\n                \"Content-Type\": \"application/json\",\n              },\n            }\n          )\n            .then((res) => res.json())\n            .then((data) => {\n              console.log(\n                `Fetching the ${eachPlaylist.name.toUpperCase()} playlist tracks...`,\n                data.items\n              );\n              setAllTracks(...tracks, data.items);\n              setRandomPlaylist(data.items);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        });\n      });\n  }\n\n  const showCategories = () => {\n    return categories.map((eachCat) => {\n      return (\n        <button onClick={(() => getPlaylists(eachCat.id))}>\n          {eachCat.name}\n        </button>\n      );\n    });\n  };\n\n  let randomInt;\n\n  const showPlaylist = () => {\n    return randomPlaylist.map((eachPlaylist) => {\n      randomInt = getRandomInt(randomPlaylist.length);\n      for (let i = 0; i < 35; i++) {\n        if (randomPlaylist[randomInt]?.track.preview_url) {\n          return (\n            <div className=\"music-tile\">\n              <img src={randomPlaylist[randomInt]?.track.album.images[0].url} />\n              <h3>{randomPlaylist[randomInt]?.track.name}</h3>\n              <audio controls>\n                <source\n                  src={randomPlaylist[randomInt]?.track.preview_url}\n                  type=\"audio/mpeg\"\n                />\n              </audio>\n            </div>\n          );\n        }\n      }\n    });\n  };\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  return (\n    <div>\n      <div className=\"margin\">\n        <h1>Choose a genre for your new playlist!</h1>\n        <div className=\"buttons-panel\">{showCategories()}</div>\n      </div>\n\n      <div>\n        <div className=\"playlist-panel\">{showPlaylist()}</div>\n      </div>\n\n      <div className=\"buttons-row margin\">\n        <Link to=\"/\">\n          <button>Return: Home</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Playlist;\n"]},"metadata":{},"sourceType":"module"}