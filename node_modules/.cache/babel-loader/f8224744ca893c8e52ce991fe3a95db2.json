{"ast":null,"code":"var _jsxFileName = \"/Users/JuanMtz/Desktop/Labs/w06/project-api/src/components/Playlist.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport token from \"./Token\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Playlist(props) {\n  _s();\n\n  let [categories, setCategories] = useState([\"\"]);\n  let [category, setCategory] = useState(\"\");\n  let [playlists, setPlaylists] = useState([]);\n  let [tracks, setTracks] = useState([]);\n  let [allTracks, setAllTracks] = useState([]);\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  async function getCategories() {\n    fetch(`https://api.spotify.com/v1/browse/categories?limit=50`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(\"Fetching categories data...\", data);\n      setCategories(data.categories.items);\n    });\n  }\n\n  async function getPlaylists(category_id) {\n    setCategory(category_id);\n    fetch(`https://api.spotify.com/v1/browse/categories/${category_id}/playlists`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(`Fetching the ${category_id.toUpperCase()} category playlists...`, data.playlists);\n      setPlaylists(data.playlists.items);\n      data.playlists.items.map(async eachPlaylist => {\n        fetch(`https://api.spotify.com/v1/playlists/${eachPlaylist.id}/tracks`, {\n          headers: {\n            Accept: \"application/json\",\n            Authorization: `Bearer ${await token()}`,\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(res => res.json()).then(data => {\n          console.log(`Fetching the ${eachPlaylist.name.toUpperCase()} playlist tracks...`, data.items);\n          setAllTracks(...tracks, data.items);\n        }).catch(error => {\n          console.log(error);\n        });\n      });\n    });\n  } //   async function getTracks(playlist_id) {\n  //     fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n  //       headers: {\n  //         Accept: \"application/json\",\n  //         Authorization: `Bearer ${await token()}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     })\n  //       .then((res) => res.json())\n  //       .then((data) => {\n  //         console.log(\"tracks\", data.items);\n  //         setTracks(data.items);\n  //       });\n  //   }\n\n\n  const showCategories = () => {\n    return categories.map(eachCat => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => getPlaylists(eachCat.id),\n        children: eachCat.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 14\n      }, this);\n    });\n  }; //   const showPlaylist = () => {\n  //     return playlists.map((eachPlaylist) => {\n  //       return (\n  //         <li onClick={() => getTracks(eachPlaylist.id)}>\n  //           {eachPlaylist.name}\n  //         </li>\n  //       );\n  //     });\n  //   };\n  //   const showTracks = () => {\n  //     return tracks.map((eachTrack) => {\n  //       if (eachTrack.track.preview_url) {\n  //         return (\n  //           <li>\n  //             {eachTrack.track.preview_url}\n  //             <audio controls>\n  //               <source src={eachTrack.track.preview_url} type=\"audio/mpeg\" />\n  //             </audio>\n  //           </li>\n  //         );\n  //       }\n  //     });\n  //   };\n  //   const makePlaylist = () => {\n  //     getPlaylists(\"chill\");\n  //     return playlists.map((eachPlaylist) => {\n  //       return (\n  //         <li key={eachPlaylist.id}>\n  //           {eachPlaylist.name}\n  //           {/* <audio controls>\n  //                 <source src={eachTrack.preview_url} type=\"audio/mpeg\" />\n  //               </audio> */}\n  //         </li>\n  //       );\n  //     });\n  //   };\n\n\n  const makePlaylist = () => {\n    setPlaylists(getPlaylists('chill'));\n    return playlists.map(eachPlaylist => {\n      tracks.map(eachTrack => {\n        if (eachTrack.track.preview_url) {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [eachTrack.track.preview_url, /*#__PURE__*/_jsxDEV(\"audio\", {\n              controls: true,\n              children: /*#__PURE__*/_jsxDEV(\"source\", {\n                src: eachTrack.track.preview_url,\n                type: \"audio/mpeg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this);\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: makePlaylist,\n        children: \"Chill\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), makePlaylist]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: showCategories()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-row\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/attractions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Previous: Attractions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/myexperience\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Finish Up: My Experience\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Playlist, \"aBT2I+bCnFPiZO4NWLA3Fzzxpmk=\");\n\n_c = Playlist;\nexport default Playlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"sources":["/Users/JuanMtz/Desktop/Labs/w06/project-api/src/components/Playlist.js"],"names":["React","useState","useEffect","Link","token","Playlist","props","categories","setCategories","category","setCategory","playlists","setPlaylists","tracks","setTracks","allTracks","setAllTracks","getCategories","fetch","headers","Accept","Authorization","then","res","json","data","console","log","items","getPlaylists","category_id","toUpperCase","map","eachPlaylist","id","name","catch","error","showCategories","eachCat","makePlaylist","eachTrack","track","preview_url"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport token from \"./Token\";\n\nfunction Playlist(props) {\n  let [categories, setCategories] = useState([\"\"]);\n  let [category, setCategory] = useState(\"\");\n  let [playlists, setPlaylists] = useState([]);\n  let [tracks, setTracks] = useState([]);\n  let [allTracks, setAllTracks] = useState([]);\n\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  async function getCategories() {\n    fetch(`https://api.spotify.com/v1/browse/categories?limit=50`, {\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${await token()}`,\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Fetching categories data...\", data);\n        setCategories(data.categories.items);\n      });\n  }\n\n  async function getPlaylists(category_id) {\n    setCategory(category_id);\n    fetch(\n      `https://api.spotify.com/v1/browse/categories/${category_id}/playlists`,\n      {\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${await token()}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\n          `Fetching the ${category_id.toUpperCase()} category playlists...`,\n          data.playlists\n        );\n        setPlaylists(data.playlists.items);\n        data.playlists.items.map(async (eachPlaylist) => {\n          fetch(\n            `https://api.spotify.com/v1/playlists/${eachPlaylist.id}/tracks`,\n            {\n              headers: {\n                Accept: \"application/json\",\n                Authorization: `Bearer ${await token()}`,\n                \"Content-Type\": \"application/json\",\n              },\n            }\n          )\n            .then((res) => res.json())\n            .then((data) => {\n              console.log(\n                `Fetching the ${eachPlaylist.name.toUpperCase()} playlist tracks...`,\n                data.items\n              );\n              setAllTracks(...tracks, data.items);\n            })\n            .catch((error) => {\n              console.log(error);\n            });\n        });\n      });\n  }\n\n  //   async function getTracks(playlist_id) {\n  //     fetch(`https://api.spotify.com/v1/playlists/${playlist_id}/tracks`, {\n  //       headers: {\n  //         Accept: \"application/json\",\n  //         Authorization: `Bearer ${await token()}`,\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     })\n  //       .then((res) => res.json())\n  //       .then((data) => {\n  //         console.log(\"tracks\", data.items);\n  //         setTracks(data.items);\n  //       });\n  //   }\n\n  const showCategories = () => {\n    return categories.map((eachCat) => {\n      return <li onClick={() => getPlaylists(eachCat.id)}>{eachCat.name}</li>;\n    });\n  };\n\n  //   const showPlaylist = () => {\n  //     return playlists.map((eachPlaylist) => {\n  //       return (\n  //         <li onClick={() => getTracks(eachPlaylist.id)}>\n  //           {eachPlaylist.name}\n  //         </li>\n  //       );\n  //     });\n  //   };\n\n  //   const showTracks = () => {\n  //     return tracks.map((eachTrack) => {\n  //       if (eachTrack.track.preview_url) {\n  //         return (\n  //           <li>\n  //             {eachTrack.track.preview_url}\n  //             <audio controls>\n  //               <source src={eachTrack.track.preview_url} type=\"audio/mpeg\" />\n  //             </audio>\n  //           </li>\n  //         );\n  //       }\n  //     });\n  //   };\n\n//   const makePlaylist = () => {\n//     getPlaylists(\"chill\");\n//     return playlists.map((eachPlaylist) => {\n//       return (\n//         <li key={eachPlaylist.id}>\n//           {eachPlaylist.name}\n//           {/* <audio controls>\n//                 <source src={eachTrack.preview_url} type=\"audio/mpeg\" />\n//               </audio> */}\n//         </li>\n//       );\n//     });\n//   };\n\n  const makePlaylist = () => {\n    setPlaylists(getPlaylists('chill'))\n    return playlists.map((eachPlaylist) => {\n      tracks.map((eachTrack) => {\n        if (eachTrack.track.preview_url) {\n          return (\n            <li>\n              {eachTrack.track.preview_url}\n              <audio controls>\n                <source src={eachTrack.track.preview_url} type=\"audio/mpeg\" />\n              </audio>\n            </li>\n          );\n        }\n      });\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <h1>Genres</h1>\n        <button onClick={makePlaylist}>Chill</button>\n        {makePlaylist}\n      </div>\n\n      {/* TRACKS\n      <ul>{showTracks()}</ul>\n      PLAYLIST\n      <ul>{showPlaylist()}</ul> */}\n      <h1>Categories</h1>\n      <ul>{showCategories()}</ul>\n      <div className=\"buttons-row\">\n        <Link to=\"/attractions\">\n          <button>Previous: Attractions</button>\n        </Link>\n        <Link to=\"/myexperience\">\n          <button>Finish Up: My Experience</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Playlist;\n"]},"metadata":{},"sourceType":"module"}